name: 'Upload to resources.ovirt.org'
description: 'Upload RPMs in a standardized way for oVirt. It must be '
inputs:
  host:
    description: 'Override host name to upload to'
    required: false
    default: resources.ovirt.org
  username:
    description: 'Username to resources.ovirt.org'
    required: true
  key:
    description: 'SSH private key without a password for resources.ovirt.org'
    required: true
  port:
    description: 'Port to use for SSH connection'
    required: false
    default: "22"
  source:
    description: 'Files to upload. This parameter allows globbing.'
    required: true
  target:
    description: 'Target directory on resources.ovirt.org.'
    required: false
  cleanup:
    description: 'Clean up files in target directory. Can be yes or no. If enabled it will remove all but the last 1000 files by file date from the specified directory.'
    required: false
    default: 'no'
  keep_files_count:
    description: "How many files to keep on cleanup in the target directory."
    required: false
    default: "1000"
  known_hosts:
    description: "Expected known hosts from the server."
    required: true
runs:
  using: "composite"
  steps:
    - name: "Validate input"
      shell: bash
      env:
        # We add the parameters as environment variables, so they can be properly quoted in the shell code below.
        HOST: ${{ inputs.host }}
        USERNAME: ${{ inputs.username }}
        KEY: ${{ inputs.key }}
        SOURCE: ${{ inputs.source }}
        TARGET: ${{ inputs.target }}
        CLEANUP: ${{ inputs.cleanup }}
        KEEP_FILES_COUNT: ${{ inputs.keep_files_count }}
        PORT: ${{ inputs.port }}
        KNOWN_HOSTS: ${{ inputs.known_hosts }}
      run: |
        set -e
        echo "::add-mask::${USERNAME}"
        echo "::add-mask::${KEY//$'\n'/'%0A'}"
        echo "::add-mask::${KEY//$'\n'/ }"
        echo -e "\e[32mValidating hostname...\e[0m"
        if ! [[ "${HOST}" =~ ^([a-zA-Z0-9\.-]+)$ ]]; then
          echo -e "\e[31mInvalid host name: ${{ inputs.host }}\e[0m" >&2 
          exit 128
        fi
        echo -e "\e[32mValidating port...\e[0m"
        if ! [[ "${PORT}" =~ ^([0-9]+)$ ]]; then
          echo -e "\e[31mThe value provided to 'port' is invalid, must be a positive number.\e[0m" >&2 
          exit 128
        fi
        echo -e "\e[32mValidating username...\e[0m"
        if ! [[ "${USERNAME}" =~ ^([a-zA-Z0-9\.-]+)$ ]]; then
          echo -e "\e[31;0mInvalid username provided, must match [a-zA-Z0-9\.-]+\e[0m" >&2 
          exit 128
        fi
        echo -e "\e[32mValidating key...\e[0m"
        if ! [[ "${KEY}" =~ ^-----BEGIN\ OPENSSH\ PRIVATE\ KEY----- ]]; then
          echo -e "\e[31mInvalid SSH key provided (must start with -----BEGIN OPENSSH PRIVATE KEY-----)\e[0m" >&2 
          exit 128
        fi
        echo -e "\e[32mValidating source...\e[0m"
        if [ -z "$(ls ${SOURCE})" ]; then
          echo -e "\e[31mThe source you provided matches no files.\e[0m" >&2
          exit 128
        fi
        echo -e "\e[32mValidating cleanup...\e[0m"
        if ! [[ "${CLEANUP}" =~ ^(yes|no)$ ]]; then
          echo -e "\e[31mThe value provided to 'cleanup' is invalid, must be 'yes' or 'no'.\e[0m" >&2 
          exit 128
        fi
        echo -e "\e[32mValidating keep_files_count...\e[0m"
        if ! [[ "${KEEP_FILES_COUNT}" =~ ^([0-9]+)$ ]]; then
          echo -e "\e[31mThe value provided to 'keep_files_count' is invalid, must be a positive number.\e[0m" >&2 
          exit 128
        fi
        echo -e "\e[32mValidating known_hosts...\e[0m"
        if [ -z "${KNOWN_HOSTS}" ]; then
          echo -e "\e[31mThe value provided to 'known_hosts' must be provided.\e[0m" >&2 
          exit 128
        fi
        echo -e "\e[32mAll parameters are valid.\e[0m"
    - name: "Extract SSH key"
      shell: bash
      env:
        # We add the parameters as environment variables, so they can be properly quoted in the shell code below.
        HOST: ${{ inputs.host }}
        USERNAME: ${{ inputs.username }}
        KEY: ${{ inputs.key }}
        SOURCE: ${{ inputs.source }}
        TARGET: ${{ inputs.target }}
        CLEANUP: ${{ inputs.cleanup }}
        KEEP_FILES_COUNT: ${{ inputs.keep_files_count }}
        KNOWN_HOSTS: ${{ inputs.known_hosts }}
      run: |
        set -e
        echo "::add-mask::${USERNAME}"
        echo "::add-mask::${KEY//$'\n'/'%0A'}"
        echo "::add-mask::${KEY//$'\n'/ }"
        echo -e "\e[32mExtracting SSH key...\e[0m"
        mkdir -p ~/.ssh
        chmod 0755 ~/.ssh
        ORIGINAL_UMASK=$(umask)
        umask 0077
        cat <<<"${KEY}" >~/.ssh/id_rsa.sshupload
        umask "${ORIGINAL_UMASK}"
        cat <<<"${KNOWN_HOSTS}" >~/.ssh/known_hosts.sshupload
    - name: "Upload files"
      env:
        # We add the parameters as environment variables, so they can be properly quoted in the shell code below.
        HOST: ${{ inputs.host }}
        USERNAME: ${{ inputs.username }}
        SOURCE: ${{ inputs.source }}
        TARGET: ${{ inputs.target }}
        CLEANUP: ${{ inputs.cleanup }}
        KEEP_FILES_COUNT: ${{ inputs.keep_files_count }}
        PORT: ${{ inputs.port }}
      shell: bash
      run: |
        set -e
        echo "::add-mask::${USERNAME}"
        echo -e "\e[32mUploading files...\e[0m"
        scp -i ~/.ssh/id_rsa.sshupload -o UserKnownHostsFile=~/.ssh/known_hosts.sshupload -o PreferredAuthentications=publickey -r -P "${PORT}" ${SOURCE} "${USERNAME}@${HOST}:${TARGET}"
    - name: "Cleanup"
      env:
        # We add the parameters as environment variables, so they can be properly quoted in the shell code below.
        HOST: ${{ inputs.host }}
        USERNAME: ${{ inputs.username }}
        TARGET: ${{ inputs.target }}
        CLEANUP: ${{ inputs.cleanup }}
        KEEP_FILES_COUNT: ${{ inputs.keep_files_count }}
      if: inputs.cleanup == 'yes'
      shell: bash
      run: |
        set -e
        echo -e "\e[32mCleaning up...\e[0m"
        COMMAND="for f in \$(find '${TARGET}' -maxdepth 1 -not -type d -printf '%T@ %p\n' | sort -nr | cut -d ' ' -f 2- | tail -n +\$((${KEEP_FILES_COUNT}+1))); do echo \$f; rm \$f; done"
        echo "Running remote command: ${COMMAND}"
        ssh -i ~/.ssh/id_rsa.sshupload -o UserKnownHostsFile=~/.ssh/known_hosts.sshupload -o PreferredAuthentications=publickey "${USERNAME}@${HOST}" "${COMMAND}"
    - name: "Remove SSH key"
      shell: bash
      if: always()
      run: |
        set -e
        echo -e "\e[32mRemoving SSH key...\e[0m"
        rm -rf ~/.ssh/id_rsa.sshupload
        rm -rf ~/.ssh/known_hosts.sshupload
