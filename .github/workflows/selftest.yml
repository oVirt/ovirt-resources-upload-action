name: Self-test
on:
  push:
  pull_request:
jobs:
  selftest:
    name: Self-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Generate SSH key
        id: ssh-key
        run: |
          set -e
          ssh-keygen -b 2048 -t rsa -f ~/.ssh/id_rsa.test -q -N ""
          SSH_KEY=$(cat ~/.ssh/id_rsa.test)
          echo "::add-mask::${SSH_KEY//$'\n'/'%0A'}"
          echo "::set-output name=private-key::${SSH_KEY//$'\n'/'%0A'}"
      - name: Start backing server
        id: server
        run: |
          set -e
          echo -e "\e[32mBuilding container image...\e[0m"
          docker build -t sshd test
          echo -e "\e[32mCreating container...\e[0m"
          CONTAINER_ID=$(docker create -e "SSH_KEY=$(cat ~/.ssh/id_rsa.test.pub)" -p 2222:2222 sshd)
          echo -e "\e[32mStarting container...\e[0m"
          docker start "${CONTAINER_ID}"
          i=0
          echo -e "\e[32mWaiting for the SSH container to be healthy...\e[0m"
          until [ "$(docker inspect -f '{{.State.Health.Status}}' "${CONTAINER_ID}")" == "healthy" ]; do
            i=$((i+1))
            if [ "$i" -gt 30 ]; then
              echo -e "\e[31mBacking server failed to come up.\e[0m"
              exit 1
            fi
            echo -e "Still waiting for the SSH container to come up, current status is \e[1m$(docker inspect -f '{{.State.Health.Status}}' "${CONTAINER_ID}")\e[0m..." 
            sleep 1
          done
          echo -e "\e[32mSSH server is now up.\e[0m"
          echo -e "\e[32mObtaining SSH server RSA host key...\e[0m"
          /usr/bin/ssh-keyscan -p 2222 -t rsa 127.0.0.1 >>~/.ssh/known_hosts.test || true
          /usr/bin/ssh-keyscan -p 2222 -t ecdsa 127.0.0.1 >>~/.ssh/known_hosts.test || true
          /usr/bin/ssh-keyscan -p 2222 -t ed25519 127.0.0.1 >>~/.ssh/known_hosts.test || true
          /usr/bin/ssh-keyscan -p 2222 -t dsa 127.0.0.1 >>~/.ssh/known_hosts.test || true
          HOST_KEYS=$(cat ~/.ssh/known_hosts.test)
          echo "::set-output name=hostkeys::${HOST_KEYS//$'\n'/'%0A'}"
          echo -e "\e[32mHost key obtained.\e[0m"
      - name: Generate test data
        run: |
          set -e
          mkdir -p testdata
          for i in $(seq 1 1000); do touch testdata/$i; done
      - name: Upload test data
        uses: ./
        with:
          host: 127.0.0.1
          port: 2222
          username: test
          key: ${{ steps.ssh-key.outputs.private-key }}
          source: testdata/*
          target: /test
          known_hosts: ${{ steps.server.outputs.hostkeys }}
      - name: Check uploaded files
        run: |
          set -e
          UPLOADED_FILES_COUNT=$(ssh -o UserKnownHostsFile=~/.ssh/known_hosts.test -i ~/.ssh/id_rsa.test -p 2222 test@127.0.0.1 "ls -1 /test" | wc -l)
          if [ "${UPLOADED_FILES_COUNT}" -ne 1000 ]; then
            echo "Incorrect number of files found on server: ${UPLOADED_FILES_COUNT}"
            exit 1
          fi
      - name: Upload test data with cleanup
        uses: ./
        with:
          host: 127.0.0.1
          port: 2222
          username: test
          key: ${{ steps.ssh-key.outputs.private-key }}
          source: testdata/*
          target: /test
          cleanup: yes
          keep_files_count: 10
          known_hosts: ${{ steps.server.outputs.hostkeys }}
      - name: Check uploaded files
        run: |
          set -e
          UPLOADED_FILES_COUNT=$(ssh -o UserKnownHostsFile=~/.ssh/known_hosts.test -i ~/.ssh/id_rsa.test -p 2222 test@127.0.0.1 "ls -1 /test" | wc -l)
          if [ "${UPLOADED_FILES_COUNT}" -ne 10 ]; then
            echo "Incorrect number of files found on server: ${UPLOADED_FILES_COUNT}"
            exit 1
          fi
